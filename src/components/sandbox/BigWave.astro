---
// AnimatedBackground.astro
---

<div id="canvas-container"></div>
<script is:inline>
  let sketch = function (p) {
    // 波形の設定
    let waves = [];

    p.setup = function () {
      // コンテナ要素の取得
      let container = document.getElementById("canvas-container");
      let canvas = p.createCanvas(
        container.offsetWidth,
        container.offsetHeight
      );
      canvas.parent(container);

      // 波形の数と特性を定義
      initWaves();

      // アウトラインを非表示
      p.noStroke();
    };

    p.draw = function () {
      p.background(18, 39, 149);
      horizontalGradient();

      // 各波形を描画
      for (let i = 0; i < waves.length; i++) {
        drawWave(waves[i], p.millis() / 1000);
      }
    };

    // 水平方向のグラデーション（左から右）
    function horizontalGradient() {
      const leftColor = p.color("#122795");
      const rightColor = p.color("#296591");

      p.noStroke();
      for (let x = 0; x < p.width; x++) {
        const inter = p.map(x, 0, p.width, 0, 1);
        const c = p.lerpColor(leftColor, rightColor, inter);
        p.stroke(c);
        p.line(x, 0, x, p.height);
      }
      p.noStroke();
    }

    // 波形の初期化
    function initWaves() {
      waves = [
        // 波形1
        {
          points: createWavePoints(8, p.height * 0),
          color: "rgba(4, 17, 59, .3)",
          endColor: "rgba(4, 17, 59, 0)",
          rotation: -30,
          gradientEndPoint: 0.6,
        },
        // 波形2
        {
          points: createWavePoints(6, p.height * 0.3, 0.85),
          color: "rgba(4, 17, 59, .5)",
          endColor: "rgba(4, 17, 59, 0)",
          rotation: -25,
          gradientEndPoint: 0.8,
        },
        // 波形3
        {
          points: createWavePoints(10, p.height * 0.6, 0.7),
          color: "rgba(4, 17, 59, .9)",
          endColor: "rgba(4, 17, 59, 0)",
          rotation: -15,
          gradientEndPoint: 1,
        },
        // 波形4
        {
          points: createWavePoints(4, p.height * 0.9, 0.6),
          color: "rgba(4, 17, 59, .9)",
          endColor: "rgba(4, 17, 59, 0)",
          rotation: -15,
          gradientEndPoint: 1,
        },
      ];
    }

    // 波形の点を作成
    function createWavePoints(count, baseY, scale = 1.0) {
      let points = [];
      let width = p.width + p.width * 0.6;
      let height = p.height;
      let segment = (width + 200) / (count - 1);

      for (let i = 0; i < count; i++) {
        points.push({
          x: -400 + i * segment,
          y: i % 2 === 0 ? baseY : baseY - height * 0.2 * scale,
          controlDistance: 150,
          speed: p.random(0.1, 0.4) * scale,
          amplitude: p.random(-50, 150) * scale,
          offset: (i % 2 === 0 ? p.PI : 0) + p.random(-p.PI / 8, p.PI / 8),
          secondarySpeed: p.random(1.3, 2.0) * scale,
          secondaryAmplitude: p.random(3, 7) * scale,
        });
      }

      return points;
    }

    // 波形の描画
    function drawWave(wave, time) {
      p.push();

      // 回転を適用
      p.translate(p.width / 2, p.height / 2);
      p.rotate(p.radians(wave.rotation));
      p.translate(-p.width / 2, -p.height / 2);

      // 各点の位置を計算
      let positions = [];
      for (let i = 0; i < wave.points.length; i++) {
        let point = wave.points[i];
        positions.push({
          x: point.x,
          y:
            point.y +
            Math.sin(time * point.speed + point.offset) * point.amplitude +
            Math.sin(time * point.secondarySpeed) * point.secondaryAmplitude,
        });
      }

      // 制御点を計算
      let controls = [];
      for (let i = 0; i < wave.points.length; i++) {
        controls.push({
          in: {
            x: positions[i].x - wave.points[i].controlDistance,
            y: positions[i].y,
          },
          out: {
            x: positions[i].x + wave.points[i].controlDistance,
            y: positions[i].y,
          },
        });
      }

      // グラデーションを設定
      p.drawingContext.save();
      let gradient = p.drawingContext.createLinearGradient(0, 0, 0, p.height);
      gradient.addColorStop(0, wave.color);
      gradient.addColorStop(wave.gradientEndPoint, wave.endColor);
      p.drawingContext.fillStyle = gradient;

      // 波形を描画
      p.beginShape();

      // 最初の点
      p.vertex(positions[0].x, positions[0].y);

      // 各ベジエ曲線
      for (let i = 0; i < positions.length - 1; i++) {
        p.bezierVertex(
          controls[i].out.x,
          controls[i].out.y,
          controls[i + 1].in.x,
          controls[i + 1].in.y,
          positions[i + 1].x,
          positions[i + 1].y
        );
      }

      // 下部の辺を追加して閉じる
      p.vertex(p.width + 100, p.height + 100);
      p.vertex(-100, p.height + 100);
      p.endShape(p.CLOSE);

      p.drawingContext.restore();
      p.pop();
    }
  };

  // スケッチの実行（DOMContentLoadedで確実に要素が存在することを保証）
  document.addEventListener("DOMContentLoaded", function () {
    new p5(sketch, "canvas-container");
  });
</script>

<style>
  #canvas-container {
    width: 100vw;
    height: 100vh;
    border: none;
    background-image: linear-gradient(90deg, #122795, #296591);
    overflow: hidden;
    position: fixed;
    top: 0;
    z-index: -1;
  }
</style>
